services:
  pyro_api:
    container_name: api
    image: pyronear/alert-api:latest
    command: "sh -c 'python app/db.py && uvicorn app.main:app --reload --host 0.0.0.0 --port 5050 --proxy-headers'"
    ports:
    - 5050:5050
    environment:
    - DEBUG=true
    - POSTGRES_URL=postgresql+asyncpg://dummy_pg_user:dummy_pg_pwd@db/dummy_pg_db
    - SQLALCHEMY_SILENCE_UBER_WARNING=1
    - SUPERADMIN_LOGIN=${SUPERADMIN_LOGIN}
    - SUPERADMIN_PWD=${SUPERADMIN_PWD}
    - SUPERADMIN_ORG=admin
    - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
    - S3_ACCESS_KEY=${S3_ACCESS_KEY}
    - S3_SECRET_KEY=${S3_SECRET_KEY}
    - S3_REGION=${S3_REGION}
    healthcheck:
      test: ["CMD-SHELL", "curl -X 'GET' 'http://pyro_api:5050/status' -H 'accept: application/json'"]
      interval: 20s
      timeout: 10s
      retries: 10
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
  db:
    image: postgres:15-alpine
    ports:
    - 5432:5432
    environment:
      - POSTGRES_USER=dummy_pg_user
      - POSTGRES_PASSWORD=dummy_pg_pwd
      - POSTGRES_DB=dummy_pg_db
    healthcheck:
      test: [CMD-SHELL, sh -c 'pg_isready -U dummy_pg_user -d dummy_pg_db']
      interval: 20s
      timeout: 10s
      retries: 10
  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z-cpuv1
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
    volumes:
      - ./data/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 10s
      retries: 5
  pyro_engine:
    container_name: engine
    image: pyronear/pyro-engine:latest
    profiles:
      - engine
    environment:
    - API_URL=${API_URL}
    - CAM_USER=${CAM_USER}
    - CAM_PWD=${CAM_PWD}
    command: python run.py
    volumes:
    - ./data:/usr/src/app/data
    logging:
      driver: json-file
      options:
        max-size: 100m
        max-file: '5'
    depends_on:
      init_script:
        condition: service_started
      pyro_api:
        condition: service_healthy
      reolinkdev1:
        condition: service_healthy
      reolinkdev2:
        condition: service_healthy
  etl_scripts:
    container_name: etl
    image: pyronear/pyro-etl:latest
    profiles:
      - etl
    environment:
    - API_URL=${API_URL}
    - SUPERADMIN_LOGIN=${SUPERADMIN_LOGIN}
    - SUPERADMIN_PWD=${SUPERADMIN_PWD}
    command: /bin/sh -c "python /usr/src/app/dl_images.py && python /usr/src/app/predict_load.py"
    volumes:
    - ./data:/usr/src/app/data
    depends_on:
      init_script:
        condition: service_started
      pyro_api:
        condition: service_healthy
  init_script:
    container_name: init
    image: pyronear/pyro-api-init:latest
    environment:
    - API_URL=${API_URL}
    - SUPERADMIN_LOGIN=${SUPERADMIN_LOGIN}
    - SUPERADMIN_PWD=${SUPERADMIN_PWD}
    - SLACK_HOOK=${SLACK_HOOK}
    volumes:
    - ./data/:/data/
    command: sh -c 'python /usr/local/bin/init_script.py && exit 0 || exit 1'
    depends_on:
      pyro_api:
        condition: service_healthy
  reolinkdev1:
    image: pyronear/reolinkdev1:latest
    profiles:
      - engine
    environment:
    - CAM_USER=${CAM_USER}
    - CAM_PWD=${CAM_PWD}
    volumes:
      - ./data:/app/data
    healthcheck:
      test: ["CMD-SHELL", "curl -X 'GET' -k 'https://reolinkdev1/health'"]
      interval: 10s
      timeout: 10s
      retries: 5
  reolinkdev2:
    image: pyronear/reolinkdev2:latest
    profiles:
      - engine
    environment:
    - CAM_USER=${CAM_USER}
    - CAM_PWD=${CAM_PWD}
    volumes:
      - ./data:/app/data
    healthcheck:
      test: ["CMD-SHELL", "curl -X 'GET' -k 'https://reolinkdev2/health'"]
      interval: 10s
      timeout: 10s
      retries: 5
  frontend:
    image: pyronear/pyro-platform:latest
    command: python index.py --host 0.0.0.0 --port 8050
    profiles:
      - front
    ports:
      - 8050:8050
    environment:
      - API_URL=${API_URL}
      - API_LOGIN=${SUPERADMIN_LOGIN}
      - API_PWD=${SUPERADMIN_PWD}
      - DEBUG=FALSE
    depends_on:
      init_script:
        condition: service_started
      pyro_api:
        condition: service_healthy
  notebooks:
    image: pyronear/notebooks:latest
    profiles:
      - tools
    ports:
      - 8889:8888
    volumes:
      - ./containers/notebooks/app:/app/notebooks
      - ./data:/app/data
      - .env:/app/.env
  db-ui:
    image: dpage/pgadmin4
    profiles:
      - tools
    ports:
      - "8888:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${DB_UI_MAIL}
      - PGADMIN_DEFAULT_PASSWORD=${DB_UI_PWD}
    depends_on:
      - db
